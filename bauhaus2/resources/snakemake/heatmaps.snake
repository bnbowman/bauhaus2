
# ---------------------------------------------------------------------------------------------------
# heatmaps.snake: Generate alignment based heatmaps.

mapped_subreads = \
    { c : expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=c)
      for c in ct.conditions }

local_fasta_files = \
    { c : expand("conditions/{condition}/reference.fasta", condition=c)
      for c in ct.conditions }

burst_metrics_csv_files = \
    { c : "conditions/{condition}/subreads/ppa_burst_metrics.csv".format(condition=c)
      for c in ct.conditions }
      
uid_tag_csv_file = "reports/uidTag.csv"

# -- Target rules --

rule heatmap_plots:
    input:
        ZMWstsPlots="reports/ZMWstsPlots/report.json",
        AlignmentBasedHeatmaps="reports/AlignmentBasedHeatmaps/report.json",
        PpaBurstMetrics=burst_metrics_csv_files.values()

rule AlignmentBasedHeatmaps:
    input: mapped_subreads.values(),
           local_fasta_files.values(),
           uid_tag_csv_file
    output: "reports/AlignmentBasedHeatmaps/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/AlignmentBasedHeatmaps.R
        """

rule ZMWstsPlots:
    input: mapped_subreads.values(),
           local_fasta_files.values(),
           uid_tag_csv_file
    output: "reports/ZMWstsPlots/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/ZMWstsPlots.R
        """