
variant_calls = \
    { c : expand("conditions/{condition}/variant_calling/variants.{depth}.gff",
                 condition=c, depth=config["bh2.coverage_titration.depths"])
      for c in ct.conditions }

rule coverage_titration:
    input: variant_calls

rule variant_call_fixed_coverage_one_condition:
    input: "conditions/{condition}/mapped/mapped.alignmentset.xml"
    output:
        gff=  "conditions/{condition}/variant_calling/variants.{depth}.gff",
        fasta="conditions/{condition}/variant_calling/consensus.{depth}.fasta",
        fastq="conditions/{condition}/variant_calling/consensus.{depth}.fastq"
    params:
        algorithm=config.get("bh2.variant_calling.consensus_algorithm", "arrow"),
        modelPath=lambda wc: ct.modelPathArg(wc.condition, "-P")
        modelSpec=lambda wc: ct.modelSpecArg(wc.condition, "-p")
        reference=reference=lambda wc: ct.reference(wc.condition)
    threads: 8
    benchmark: "benchmarks/{condition}_{depth}_variant_call_fixed_coverage_one_condition.tsv"
    shell:
        """
        variantCaller {params.modelPath} {params.modelSpec} --algorithm={params.algorithm} \
             -X{depth} -x0 -q0 -j $ncpus --reportEffectiveCoverage \
            {input} -r {params.reference} -o {output.gff} \
            -o {output.fasta} -o {output.fastq}
        """
