
# ---------------------------------------------------------------------------------------------------
# consensus-coverage-titration.snake : gauge genomic consensus performance at fixed coverage levels



masked_variant_calls = \
    { c : expand("conditions/{condition}/variant_calling/masked-variants.{depth}.gff",
                 condition=c, depth=config["bh2.consensus_coverage_titration.depths"])
      for c in ct.conditions }

variant_calls = \
    { c : expand("conditions/{condition}/variant_calling/variants.{depth}.gff",
                 condition=c, depth=config["bh2.consensus_coverage_titration.depths"])
      for c in ct.conditions }

alignments_summaries = \
    { c : expand("conditions/{condition}/variant_calling/alignments-summary.gff", condition=c)
      for c in ct.conditions }


# -- report!

rule coverage_titration_report:
    output: "reports/CoverageTitration/report.json"
    input:
        maskedVariantGffs=masked_variant_calls.values(),
        alignmentSummary=alignments_summaries.values()
    benchmark: "benchmarks/coverage_titration_report.tsv"
    shell:
        """
        Rscript --vanilla scripts/R/coverageTitrationPlots.R .
        """

# -- mask away a few known "bad" areas of the reference (inaccurate
# -- reference, observed nonclonality in sample, etc.)

rule mask_variants:
    input: masked_variant_calls.values()

rule mask_variants_1:
    output: "conditions/{condition}/variant_calling/masked-variants.{depth}.gff"
    input:
        rawVariantsGff="conditions/{condition}/variant_calling/variants.{depth}.gff",
        genomeMask=lambda wc: ct.referenceMask(wc.condition)
    benchmark: "benchmarks/{condition}_mask_variants.tsv"
    shell:
        """
        module load gfftools/dalexander
        gffsubtract.pl {input.rawVariantsGff} {input.genomeMask} > {output}
        """

# -- summarize true available coverage levels

# TODO: make "otherbin" tools available via "module load smrtanalysis/mainline-with-otherbins
SUMMARIZE_COVERAGE="/pbi/dept/secondary/builds/links/current_develop_smrttools-cleanbuild_installdir/private/otherbins/internalall/bin/summarize_coverage"

rule summarize_coverage:
    output: "conditions/{condition}/variant_calling/alignments-summary.gff"
    input:
        alignments="conditions/{condition}/mapped/mapped.alignmentset.xml",
        reference="conditions/{condition}/reference.fasta"
    benchmark: "benchmarks/{condition}_summarize_coverage.tsv"
    shell:
        """
        {SUMMARIZE_COVERAGE} --region_size=10000 {input.alignments} {input.reference} {output}
        """

# -- variant calling at fixed coverage depths;

rule coverage_titration:
    input: variant_calls.values()


rule variant_call_fixed_coverage_one_condition:
    input: "conditions/{condition}/mapped/mapped.alignmentset.xml"
    output:
        gff=  "conditions/{condition}/variant_calling/variants.{depth}.gff",
        fasta="conditions/{condition}/variant_calling/consensus.{depth}.fasta",
        fastq="conditions/{condition}/variant_calling/consensus.{depth}.fastq"
    params:
        algorithm=config.get("bh2.variant_calling.consensus_algorithm", "arrow"),
        modelPath=lambda wc: ct.modelPathArg(wc.condition, "-P"),
        modelSpec=lambda wc: ct.modelSpecArg(wc.condition, "-p"),
        reference=lambda wc: ct.reference(wc.condition)
    threads: 8
    benchmark: "benchmarks/{condition}_variant_call_fixed_coverage_one_condition.tsv"
    shell:
        """
        variantCaller {params.modelPath} {params.modelSpec} --algorithm={params.algorithm} \
             -X{wildcards.depth} -x0 -q0 -j {threads} --reportEffectiveCoverage \
            {input} -r {params.reference} -o {output.gff} \
            -o {output.fasta} -o {output.fastq}
        """
