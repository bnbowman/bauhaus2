
# ---------------------------------------------------------------------------------------------------
# ccs-subreads.snake

ccs_chunks = \
    { c : expand("conditions/{condition}/ccs/chunks/ccs.chunk{chunkNo}.consensusreadset.xml",
                 condition=c, chunkNo=range(config["bh2.scatter_subreads.chunks_per_condition"]))
      for c in ct.conditions }

gathered_ccs_chunks = \
    { c : expand("conditions/{condition}/ccs/ccs.consensusreadset.xml", condition=c)
      for c in ct.conditions }

# -- Target rules --

rule ccs:
    input: gathered_ccs_chunks.values()

rule ccs_chunks:
    input: listConcat(ccs_chunks.values())

# -- Worker rules --

def modelPathArg(config):
    if ("bh2.ccs.model_path" not in config or
        not config["bh2.ccs.model_path"]):
        return ""
    else:
        return "--modelPath %s" % config["bh2.ccs.model_path"]

def modelSpecArg(config):
    if ("bh2.ccs.model_spec" not in config or
        not config["bh2.ccs.model_spec"]):
        return ""
    else:
        return "--modelSpec %s" % config["bh2.ccs.model_spec"]

rule ccs_one_chunk:
    input:  "conditions/{condition}/subreads/chunks/input.chunk{chunkNo}.subreadset.xml"
    output:
        dset="conditions/{condition}/ccs/chunks/ccs.chunk{chunkNo}.consensusreadset.xml",
        bam= "conditions/{condition}/ccs/chunks/ccs.chunk{chunkNo}.ccs.bam",
        ccsDiagnosticsReport="conditions/{condition}/ccs/chunks/ccs.chunk{chunkNo}.report.txt"
    params:
        modelPath=modelPathArg(config),
        modelSpec=modelSpecArg(config)
    threads: 8
    shell:
        """
        ccs --force --numThreads={threads} \
            --reportFile={output.ccsDiagnosticsReport} {params.modelPath} {params.modelSpec} \
             {input} {output.bam} && \
        dataset create --type ConsensusReadSet {output.dset} {output.bam}
        """

rule ccs_one_condition:
    input: lambda wc: ccs_chunks[wc.condition]
    output: "conditions/{condition}/ccs/ccs.consensusreadset.xml"
    shell:
        """
        dataset merge {output} {input}
        """
