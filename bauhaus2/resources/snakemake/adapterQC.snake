import subprocess

def has_adpqc(wildcards):
    module = ct.ppaModule(wildcards.condition)
    exe = ct.ppaExe(wildcards.condition)
    sa = subprocess.check_output(
        "source /mnt/software/Modules/current/init/bash && "
        "module use /mnt/software/modulefiles && module purge && "
        "module load {module} && "
        "{exe} -h | grep adpqc > /dev/null; echo $?".format(
            module=module, exe=exe),
        shell=True, executable="/bin/bash")
    tbr = not bool(int(sa.strip()))
    return tbr

rule run_pbQcAdapters:
    input:
        subreadset='conditions/{condition}/primary/input.subreadset.xml',
        reference="conditions/{condition}/reference.fasta"
    benchmark: "benchmarks/{condition}_run_pbQcAdapters.tsv"
    output:
        adp_rep="reports/AdapterQC/{condition}/adapterReport.csv",
        zia_rep='reports/AdapterQC/{condition}/adapterZiaReport.csv',
        txt_rep='reports/AdapterQC/{condition}/adapterQCReport.txt'
    params: subreads='conditions/{condition}/primary/input.subreads.bam'
    threads: 3
    run:
        if has_adpqc(wildcards):
            cmd = (
                "module load pbqctools\n"
                "pbQcAdapters {input.reference} {params.subreads} --adapterReport "
                "{output.adp_rep} --zia {output.zia_rep} "
                "> {output.txt_rep}\n")
            shell(cmd)
        else:
            for ofn in output:
                with open(ofn, 'w') as ofh:
                    ofh.write('\n')

"""This is a dummy gather step over conditions for now."""
rule adapter_reports:
    input:
        expand("reports/AdapterQC/{condition}/adapterReport.csv",
               condition=ct.conditions),
        expand("reports/AdapterQC/{condition}/adapterZiaReport.csv",
               condition=ct.conditions)
    output: "reports/AdapterQC/report.json"
    shell:
        """echo "{{}}" > {output}"""
