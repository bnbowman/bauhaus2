# ---------------------------------------------------------------------------------------------------
# scatter-constant-arrow-by-reference.snake: fit constant arrow model separately by reference, 
# generating csv file of errormodes, and make Fishbone plots using the csv file.

import shutil

# -- Target rules --

rule constant_arrow_plots:
    input:
        constantArrowPlots = "reports/ConstantArrowFishbonePlots/report.json"

rule ScatterMappedReadsByReference:
    input:
        asets = "conditions/{condition}/mapped/mapped.alignmentset.xml"
    params:
        chunk_path = "conditions/{condition}/mapped/ref_chunker/"
    output:
        "conditions/{condition}/mapped/ref_chunker/done.empty"
    shell:
        """
        mkdir -p {params.chunk_path}
        dataset split --contigs --outdir {params.chunk_path} {input.asets}
        touch {output}
        """

rule findChunks:
    input:
        expand("conditions/{condition}/mapped/ref_chunker/done.empty", condition=ct.conditions)
    output:
        dynamic(expand("conditions/{condition}/mapped/ref_chunk/mapped.chunk{{dynChunkN}}.alignmentset.xml", condition=ct.conditions))
    run:
        for path in input:
            print(path)
            indir = os.path.dirname(path)
            outdir = indir.replace('ref_chunker', 'ref_chunk')
            shell("mkdir -p {o} && cp -r {i}/* {o}".format(i=indir, o=outdir))

rule ConstantArrowPlots:
    input: "reports/ConstantArrowFishbonePlots/errormode-simple.csv",
    output: "reports/ConstantArrowFishbonePlots/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/FishbonePlots.R
        """

rule MakeMappingMetricsCsv:
    input:
        asets = expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=ct.conditions),
        arrow_csv = "reports/ConstantArrowFishbonePlots/errormode-simple.csv"
    output: metrics_csv = "reports/ConstantArrowFishbonePlots/mapped-metrics.csv"
    shell:
        """
        python scripts/Python/MakeMappingMetricsCsv.py --asets {input.asets} --arrow-csv {input.arrow_csv} --output {output.metrics_csv}
        """

rule SimplifyConstantArrowCsv:
    input: "reports/ConstantArrowFishbonePlots/errormode.csv"
    output: "reports/ConstantArrowFishbonePlots/errormode-simple.csv"
    shell:
        """
        python scripts/Python/ConsolidateArrowConditions.py --arrow-csv {input} --output {output}
        """

rule ConstantArrowEachConditionRef:
    input:  asetfile = "conditions/{condition}/mapped/ref_chunk/mapped.chunk{dynChunkN}.alignmentset.xml"
    output: outputcsv = "conditions/{condition}/mapped/ref_chunk/ref_con_{dynChunkN}.csv"
    params: fastafile = "conditions/{condition}/reference.fasta"
    shell:
        """
        Rscript --vanilla scripts/R/constant_arrow.R --noCT --input_aln {input.asetfile} --input_ref {params.fastafile} --output_csv {output.outputcsv}
        """

rule mergeCSV:
    input: dynamic(expand("conditions/{condition}/mapped/ref_chunk/ref_con_{{dynChunkN}}.csv", condition=ct.conditions))
    output: outputcsv = "reports/ConstantArrowFishbonePlots/errormode.csv"
    shell:
        """
        awk  'FNR > 1' {input} > {output.outputcsv}
        sed -i.bak 1i"ZMW,SNR.A,SNR.C,SNR.G,SNR.T,A.Insert.A,C.Insert.A,G.Insert.A,T.Insert.A,A.Insert.C,C.Insert.C,G.Insert.C,T.Insert.C,A.Insert.G,C.Insert.G,G.Insert.G,T.Insert.G,A.Insert.T,C.Insert.T,G.Insert.T,T.Insert.T,A.Match.A,C.Match.A,G.Match.A,T.Match.A,A.Match.C,C.Match.C,G.Match.C,T.Match.C,A.Match.G,C.Match.G,G.Match.G,T.Match.G,A.Match.T,C.Match.T,G.Match.T,T.Match.T,A.Dark.A,C.Dark.C,G.Dark.G,T.Dark.T,A.Merge.A,C.Merge.C,G.Merge.G,T.Merge.T,AlnTLength,Time,Iterations,Condition,Reference" {output.outputcsv}
        """

