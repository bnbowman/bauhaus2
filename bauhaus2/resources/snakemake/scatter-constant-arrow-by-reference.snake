# ---------------------------------------------------------------------------------------------------
# scatter-constant-arrow-by-reference.snake: fit constant arrow model separately by reference, 
# generating csv file of errormodes, and make Fishbone plots using the csv file.

    
# -- Target rules --

rule constant_arrow_plots:
    input:
        constantArrowPlots = "reports/ConstantArrowFishbonePlots/report.json"

rule ConstantArrowPlots:
    input: "reports/ConstantArrowFishbonePlots/errormode-simple.csv",
    output: "reports/ConstantArrowFishbonePlots/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/FishbonePlots.R
        """

rule MakeMappingMetricsCsv:
    input: 
        asets = expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=ct.conditions),
        arrow_csv = "reports/ConstantArrowFishbonePlots/errormode-simple.csv"
    output: metrics_csv = "reports/ConstantArrowFishbonePlots/mapped-metrics.csv"
    shell:
        """
        python scripts/Python/MakeMappingMetricsCsv.py --asets {input.asets} --arrow-csv {input.arrow_csv} --output {output.metrics_csv}
        """

rule SimplifyConstantArrowCsv:
    input: "reports/ConstantArrowFishbonePlots/errormode.csv"
    output: "reports/ConstantArrowFishbonePlots/errormode-simple.csv"
    shell:
        """
        python scripts/Python/ConsolidateArrowConditions.py --arrow-csv {input} --output {output}
        """

rule ConstantArrowEachConditionRef:
    input:  "contig-chunked-condition-table.csv"
    output: outputcsv = "conditions/{condition}/mapped/ref_chunk/ref_con_{num}.csv"
    params:
        chunk_path = "conditions/{condition}/mapped/ref_chunk/",
        fastafile = "conditions/{condition}/reference.fasta",
        asetfile = "conditions/{condition}/mapped/ref_chunk/mapped.chunk{num}.alignmentset.xml"
    shell:
        """
        cd {params.chunk_path}
        Rscript --vanilla ../../../../scripts/R/constant_arrow.R --noCT --input_aln ../../../../{params.asetfile} --input_ref ../../../../{params.fastafile} --output_csv ../../../../{output.outputcsv}
        cd ../../../..
        touch {output.is_finished}
        """
condition, f = glob_wildcards("conditions/{c}/mapped/ref_chunk/mapped.chunk{f}.csv")
rule mergeCSV:
    input: ca_asets = expand("conditions/{condition}/mapped/ref_chunk/mapped.chunk{f}.csv", zip, condition=condition, f=f)
    output: outputcsv = "reports/ConstantArrowFishbonePlots/errormode.csv"
    shell:
        """
        awk  'FNR > 1' conditions/*/mapped/ref_chunk/*.csv > {output.outputcsv}
        sed -i.bak 1i"ZMW,SNR.A,SNR.C,SNR.G,SNR.T,A.Insert.A,C.Insert.A,G.Insert.A,T.Insert.A,A.Insert.C,C.Insert.C,G.Insert.C,T.Insert.C,A.Insert.G,C.Insert.G,G.Insert.G,T.Insert.G,A.Insert.T,C.Insert.T,G.Insert.T,T.Insert.T,A.Match.A,C.Match.A,G.Match.A,T.Match.A,A.Match.C,C.Match.C,G.Match.C,T.Match.C,A.Match.G,C.Match.G,G.Match.G,T.Match.G,A.Match.T,C.Match.T,G.Match.T,T.Match.T,A.Dark.A,C.Dark.C,G.Dark.G,T.Dark.T,A.Merge.A,C.Merge.C,G.Merge.G,T.Merge.T,AlnTLength,Time,Iterations,Condition,Reference" {output.outputcsv}
        """
condition, num = glob_wildcards("conditions/{c}/mapped/ref_chunk/mapped.chunk{f}.alignmentset.xml")
rule CreateArrowConditionTable:
    input:  
        scatterdone = expand("conditions/{condition}/mapped/scatterdone.empty", condition=ct.conditions),
        chunked_asets = expand("conditions/{condition}/mapped/ref_chunk/mapped.chunk{num}.alignmentset.xml", zip, condition=condition, num=num), 
        refs = expand("conditions/{condition}/reference.fasta", condition=ct.conditions),
        condition_table = "condition-table.csv"
    output: "contig-chunked-condition-table.csv"
    run:
        shell("echo {input.scatterdone}")
        shell("python scripts/Python/RefilterMappedReadsByReference.py --asets {input.chunked_asets}") # hack bc rname not supported in pbbam
        shell("python scripts/Python/MakeChunkedConditionTable.py --asets {input.chunked_asets} --condition-table {input.condition_table} --refs {input.refs} --output {output}")

rule ScatterMappedReadsByReference:
    input: 
        asets = "conditions/{condition}/mapped/mapped.alignmentset.xml"
    params:
        chunk_path = "conditions/{condition}/mapped/ref_chunk/"
    output: 
        is_done = "conditions/{condition}/mapped/scatterdone.empty"
    run:
        shell("mkdir {params.chunk_path}")
        shell("dataset split --contigs --outdir {params.chunk_path} {input.asets}")
        shell("touch {output.is_done}")