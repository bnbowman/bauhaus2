
# ---------------------------------------------------------------------------------------------------
# constant-arrow.snake: fit constant arrow model, generating csv file of errormode,
# and make Fishbone plots using the csv file.

# -- Target rules --

rule constant_arrow_plots:
    input:
        constantArrowPlots = "reports/ConstantArrowFishbonePlots/report.json"

rule ConstantArrowPlots:
    input: "reports/ConstantArrowFishbonePlots/errormode.csv"
    output: "reports/ConstantArrowFishbonePlots/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/FishbonePlots.R
        """

rule MakeMappingMetricsCsv:
    input: 
        asets = expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=ct.conditions),
        arrow_csv = "reports/ConstantArrowFishbonePlots/errormode.csv"
    output: metrics_csv = "reports/ConstantArrowFishbonePlots/mapped-metrics.csv"
    shell:
        """
        python scripts/Python/MakeMappingMetricsCsv.py --asets {input.asets} --arrow-csv {input.arrow_csv} --output {output.metrics_csv}
        """

rule ConstantArrow:
    input: "contig-chunked-condition-table.csv"
    output: "reports/ConstantArrowFishbonePlots/errormode.csv"
    shell:
        """
        Rscript --vanilla scripts/R/constant_arrow.R
        """

rule CreateArrowConditionTable:
    input: chunked_asets = [dynamic("conditions/%s/mapped/chunk/mapped.chunk{num}.alignmentset.xml" % (c) for c in ct.conditions)],
           condition-table = "condition-table.csv"
    output: "contig-chunked-condition-table.csv"
    shell:
        """
        python scripts/Python/MakeChunkedConditionTable.csv --asets {input.chunked_asets} --condition-table {input.condition-table} --output {output}
        """

rule ScatterMappedReadsByReference:
    input: 
        asets = "conditions/{condition}/mapped/mapped.alignmentset.xml"
    params:
        chunk_path = "conditions/{condition}/mapped/chunk"
    output: dynamic("conditions/{condition}/mapped/chunk/mapped.chunk{num}.alignmentset.xml")
    shell:
        """
        dataset split --contigs --outdir {params.chunk_path} {input.asets}
        """