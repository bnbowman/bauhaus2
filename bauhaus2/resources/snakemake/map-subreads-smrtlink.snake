
# ---------------------------------------------------------------------------------------------------
# map-subreads-smrtlink.snake: map subreads using a SMRTLink server, via pbservice call

local_alignmentsets = \
    { c : expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=c)
      for c in ct.conditions }

# -- Target rules --

rule map_subreads:
    input: local_alignmentsets.values()

# -- Worker rules --

sl_host=config["bh2.smrtlink.host"]
sl_port=config["bh2.smrtlink.services_port"]


# -- Hack: we need to workaround a problem with SMRTLink where jobs can't
# -- be submitted simultaneously.  To achieve these, we run all submits
# -- on the head node (making this a localrule), and then we use a
# -- semaphore to serialize executions of `pbservice run-pipeline`

localrules: map_subreads_smrtlink_launch

rule map_subreads_smrtlink_launch:
    input:
        subreadSet="conditions/{condition}/subreads/input.subreadset.xml",
        referenceSet=lambda wc: ct.referenceSet(wc.condition)
    output:
        pbserviceInfo="conditions/{condition}/mapped/pbservice.json"
    params:
        presetXmlFile="extras/pbsmrtpipe-mappings-preset.xml",
        jobid = "Bauhaus2_Job_{condition}"
    shell:
        """
        module add parallel

        # Call pbservice; bail out on failure
        sem --no-notice --id smrtlink-siv-semaphore -j1 --fg \
        pbservice run-pipeline pbsmrtpipe.pipelines.sa3_ds_align \
          --host {sl_host} --port {sl_port} \
          -e {input.subreadSet} \
          -e {input.referenceSet} \
          --preset-xml {params.presetXmlFile} --job-title {params.jobid} \
          --json \
        > {output}
        """

rule map_subreads_smrtlink_poll:
    input: "conditions/{condition}/mapped/pbservice.json"
    output:
        flagFile="conditions/{condition}/mapped/job_complete",
        pollJson="conditions/{condition}/mapped/poll.json",
        localJobLink="conditions/{condition}/mapped/job_link"
    run:
        import time, sys, os
        jobId = extractJobId(input[0])
        jobRoot = extractJobPath(input[0])
        os.symlink(jobRoot, output.localJobLink)
        while True:
            shell("pbservice get-job %s --host {sl_host} --port {sl_port} --json > {output.pollJson}" % jobId)
            status = extractJobStatus(output.pollJson)
            print("Found status: %s" % status)
            if status in JobStatus.FAILED_STATES:
                print("SMRTLink job has failed")
                sys.exit(1)
            elif status in JobStatus.SUCCESS_STATES:
                print("SMRTLink job has succeeded")
                break
            else:
                print("Will sleep")
                time.sleep(90)
                continue
        touchFile(output.flagFile)

rule map_subreads_smrtlink_collect:
    input:
        flagFile="conditions/{condition}/mapped/job_complete",
        pollFile="conditions/{condition}/mapped/poll.json",
        localJobLink="conditions/{condition}/mapped/job_link",
        reference="conditions/{condition}/reference.fasta"
    output:
        "conditions/{condition}/mapped/mapped.alignmentset.xml"
    params:
        locationOfAlignmentSet="tasks/pbalign.tasks.consolidate_alignments-0/combined.alignmentset.xml"
    shell:
        """
        dataset create {output} {input.localJobLink}/{params.locationOfAlignmentSet}
        dataset newuuid --random {output}
        """
