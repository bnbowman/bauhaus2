
# ---------------------------------------------------------------------------------------------------
# adapterEvaluation.snake

local_subreadset = {
    c: expand("conditions/{condition}/subreads/input.subreadset.xml",
              condition=c)
    for c in ct.conditions}
    
local_referenceset = {
    c: expand("conditions/{condition}/reference.fasta",
              condition=c)
    for c in ct.conditions}
    
local_adapterreport = {
    c: expand("reports/{condition}/report.json",
              condition=c)
    for c in ct.conditions}
    
local_adapter = \
    { c : expand("conditions/{condition}/adapter.fasta", condition=c)
      for c in ct.conditions}
      
remote_adapter = \
    { c : ct.adapter(c)
      for c in ct.conditions}
      
local_callCSVNH = \
    { c : "reports/{condition}/callAccuracyNH.csv".format(condition=c)
      for c in ct.conditions }
      
local_zmwCSVNH = \
    { c : "reports/{condition}/zmwAccuracyNH.csv".format(condition=c)
      for c in ct.conditions }
      
ct_prefix = ct.prefix(ct.conditions[0]) # Note that in one condition table, the prefix should always be consistent for all conditions

# -- Target rules --

rule adapterEvaluation:
    input:
        local_adapterreport.values(),
        "reports/Combined_Conditions"

# -- Worker rules -- 

rule collect_adapter_one_condition:
    input:
        adapter=lambda wc: remote_adapter[wc.condition],
    output:
        adapter="conditions/{condition}/adapter/adapter.fasta",
    shell:
        """
        ln -s {input.adapter} {output.adapter}
        """

rule unrolled_reference_one_condition:
    input:  referenceset = "conditions/{condition}/reference.fasta",
            adapter = "conditions/{condition}/adapter/adapter.fasta"
    output:
        unrolledfasta= "conditions/{condition}/unrolled_reference/unrolled.fasta",  
        unrolledcsv="conditions/{condition}/unrolled_reference/unrolled_pos.csv",
        outputdir="conditions/{condition}/unrolled_reference"
    threads: 24
    shell:
        """
        module purge
        module load smstools
        cd {output.outputdir}
        python ../../../scripts/Python/WriteUnrolledReference.py ../../../{input.referenceset} ../../../{input.adapter} unrolled
        cd ../../..
        """

rule hqregion_bam_one_condition:
    input:  subreadset = "conditions/{condition}/subreads/input.subreadset.xml"
    output:
        hqregionsbam= "conditions/{condition}/unrolled_bam/unrolled.hqregions.bam",
        outputdir="conditions/{condition}/unrolled_bam"
    threads: 24
    shell:
        """
        module purge
        module add ppa/mainline
        cd {output.outputdir}
        bam2bam ../../../{input.subreadset} --hqregion -o unrolled -j 12 -b 4
        cd ../../..
        """

rule blasr_alignment_one_condition:
    input:  hqregionsbam= "conditions/{condition}/unrolled_bam/unrolled.hqregions.bam",
            unrolledfasta= "conditions/{condition}/unrolled_reference/unrolled.fasta"
    output:
        alignbam= "conditions/{condition}/mapped/unrolled.hqregions.align.bam"       
    threads: 24
    shell:
        """
        module purge
        module load smrtanalysis/mainline
        blasr --nproc 16 --bestn 1 --forwardOnly --hitPolicy leftmost --minAlnLength 4000 --minPctAccuracy 70  --fastSDP --fastMaxInterval --bam --out {output.alignbam} {input.hqregionsbam} {input.unrolledfasta} 
        pbindex {output.alignbam}
        """
        
rule adapter_labeled_one_condition:
    input:  subreadset = "conditions/{condition}/subreads/input.subreadset.xml",
            adapter = "conditions/{condition}/adapter/adapter.fasta"
    output:
        adapterdata= "conditions/{condition}/adapter/adapter_data.csv"       
    threads: 24
    shell:
        """
        module load smstools
        adapterlabeler {input.adapter} {input.subreadset} > {output.adapterdata}
        """

rule adapter_summary_one_condition:
    input:  unrolledcsv="conditions/{condition}/unrolled_reference/unrolled_pos.csv",
            alignbam= "conditions/{condition}/mapped/unrolled.hqregions.align.bam",
            adapterdata= "conditions/{condition}/adapter/adapter_data.csv"
    output:
        finalcsv= "reports/{condition}/final.csv"
    params:
        tag = "{condition}"
    threads: 24
    shell:
        """
        module load smstools
        python scripts/Python/AdpFromAlignments.py  {input.unrolledcsv} {input.alignbam} {input.adapterdata} {params.tag} > {output.finalcsv}
        """
   
rule result_summary_one_condition:
    input:  finalcsv= "reports/{condition}/final.csv"
    output:
        reportscsv= "reports/{condition}/results.csv"       
    threads: 24
    shell:
        """
        python scripts/Python/est_rates2.py {input.finalcsv} > {output.reportscsv}
        """   

rule result_plot_one_condition:
    input:  finalcsv= "reports/{condition}/final.csv",
            reportscsv= "reports/{condition}/results.csv"
    output:
        reportsjson= "reports/{condition}/report.json",
        callCSVNH = "reports/{condition}/callAccuracyNH.csv",
        zmwCSVNH = "reports/{condition}/zmwAccuracyNH.csv"
    params:
        condition= "{condition}",
        reportsfolder= "reports/{condition}"
    threads: 24
    shell:
        """
        module load smstools
        cd {params.reportsfolder}
        python ../../scripts/Python/AdapterAnalysisPlots.py {params.condition} ../../{input.finalcsv}
        sed 1d callAccuracy.csv > callAccuracyNH.csv
        sed 1d zmwAccuracy.csv > zmwAccuracyNH.csv
        cd ../..
        """ 
        
rule combineCSV:
    input: local_callCSVNH.values(),
           local_zmwCSVNH.values()
    output: combinedCallcsv="reports/Combined_Conditions/combined_callAccuracy.csv",
            combinedZMWcsv="reports/Combined_Conditions/combined_zmwAccuracy.csv"
    shell:
        """
        
        cat reports/*/callAccuracyNH.csv > {output.combinedCallcsv}
        sed -i.bak 1i"AdapterClass,AdapterType,CallAccuracy,Condition" {output.combinedCallcsv}
        cat reports/*/zmwAccuracyNH.csv > {output.combinedZMWcsv}
        sed -i.bak 1i"AdapterClass,AdapterType,Condition,ZmwAccuracy" {output.combinedZMWcsv}
        """
        
rule generateCombinedPlots:
    input: combinedCallcsv="reports/Combined_Conditions/combined_callAccuracy.csv",
           combinedZMWcsv="reports/Combined_Conditions/combined_zmwAccuracy.csv"
    output: "reports/Combined_Conditions/report.json",
            "reports/Combined_Conditions"
    params:
        reportsfolder= "reports/Combined_Conditions"
    shell:
        """
        module load smstools
        cd {params.reportsfolder}
        python ../../scripts/Python/CombinedAdapterAnalysisPlots.py  ../../{input.combinedCallcsv} ../../{input.combinedZMWcsv}
        cd ../..
        """