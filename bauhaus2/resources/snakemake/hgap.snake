
# ---------------------------------------------------------------------------------------------------
# HGAP.snake

from bauhaus2.runtime import ct

local_alignmentset = \
    { c : expand("conditions/{condition}/mapped/mapped.alignmentset.xml", condition=c)
      for c in ct.conditions }

local_references = \
    { c : expand("training/{condition}.alignmentset.xml.ref.fa", condition=c)
      for c in ct.conditions }

polished_references = \
    { c : expand("conditions/{condition}/polished.fasta", condition=c)
      for c in ct.conditions }
      
csv_results = \
    { c : expand("conditions/{condition}/outputs_{condition}/snps.csv", condition=c)
      for c in ct.conditions }
      
plot_results = \
    { c : expand("reports/{condition}/{condition}_output.png", condition=c)
      for c in ct.conditions }
      
txt_results = \
    { c : expand("conditions/{condition}/fastalengthfile.txt", condition=c)
      for c in ct.conditions }
      
json_results = \
    { c : expand("reports/{condition}/report.json", condition=c)
      for c in ct.conditions }

local_assemblyStats = \
    { c : "reports/{condition}/assembly.csv".format(condition=c)
      for c in ct.conditions }

local_snpsCSV = \
    { c : "reports/{condition}/polished_snps.csv".format(condition=c)
      for c in ct.conditions }      
      
# -- Target --

rule collect_csv:
    input: json_results.values(),
           local_assemblyStats.values(),
           "reports/combinedAssembly.csv",
           "reports/report.json",
           "reports/merge_snps.csv"

# -- Worker rules ---

rule combineCSV:
    input: local_assemblyStats.values()
    output: combinedcsv="reports/combinedAssembly.csv"
    shell:
        """
        cat reports/*/assembly.csv > {output.combinedcsv}
        sed -i.bak 1i",id,name,value,condition" {output.combinedcsv}
        """

rule generatePlots:
    input: combinedcsv ="reports/combinedAssembly.csv"
    output: json ="reports/report.json"
    shell:
        """
        Rscript --vanilla scripts/R/combined_hgap.R
        """

rule convertJsonToCSV:
    input: 
        polishedjson="conditions/{condition}/assemblystats/polished_assembly_report.json",
        prejson="conditions/{condition}/assemblystats/preassembly_yield.json"
    output:
        polishedcsv="conditions/{condition}/assemblystats/polished_assembly_report.csv",
        precsv="conditions/{condition}/assemblystats/preassembly_yield.csv",
        mergecsv="reports/{condition}/assembly.csv",
    params:
        tag = "{condition}",
        nhpolishedcsv="reports/{condition}/nhpolished.csv",
        nhprecsv="reports/{condition}/nhpre.csv"
    shell:
        """
        module load anaconda
        python scripts/Python/convertJsonToCSV.py {input.polishedjson} {output.polishedcsv} {params.tag}
        python scripts/Python/convertJsonToCSV.py {input.prejson} {output.precsv} {params.tag}
        sed 1d {output.precsv} > {params.nhprecsv}
        sed 1d {output.polishedcsv} > {params.nhpolishedcsv}
        cat {params.nhpolishedcsv} {params.nhprecsv} > {output.mergecsv}
        rm -f {params.nhpolishedcsv} {params.nhprecsv}
        """
        
rule variantCaller:
    input: 
        alignment_set="conditions/{condition}/mapped/mapped.alignmentset.xml",
        reference="conditions/{condition}/smrtlink-reference.fasta"
    output:
        polished_fasta="conditions/{condition}/polished.fasta",
        fastq="conditions/{condition}/polished.fastq",
        gff = "conditions/{condition}/polished.polished.gff",
        vcf = "conditions/{condition}/polished.vcf"
    threads: 24
    params:
        modelPath=lambda wc: ct.modelPathArg(wc.condition, "-P")
    shell:
        """
        . /etc/profile.d/modules.sh
        module add smrtlink/internal
        exec variantCaller --algorithm=arrow -j{threads} -x0 -q0 {params.modelPath} -p trained_condition -o {output.polished_fasta} -o {output.fastq} -o {output.gff} -o {output.vcf} -r {input.reference} {input.alignment_set}
        """
        
rule run_mummer:
    input: 
        reference="conditions/{condition}/reference.fasta",
        polished_fasta="conditions/{condition}/polished.fasta"
    output:
        csvfile = "conditions/{condition}/outputs_{condition}/snps.csv",
        deltafile="conditions/{condition}/outputs_{condition}/dnadiff.delta",
        outputdir = "conditions/{condition}/outputs_{condition}"
    shell:
        """
        module load mummer
        cd {output.outputdir}
        dnadiff -p dnadiff ../../../{input.reference} ../../../{input.polished_fasta}
        nucmer -mum -p nucmer ../../../{input.reference} ../../../{input.polished_fasta}
        show-snps -x10 -C nucmer.delta > ../../../{output.csvfile}
        cd ../../../
        """
    
rule generate_mummer_plot:
    input: 
        deltafile="conditions/{condition}/outputs_{condition}/dnadiff.delta",
        outputdir = "conditions/{condition}/outputs_{condition}"
    output:
        indir = "conditions/{condition}/",
        outdir = "reports/{condition}/",
        out_plot = "reports/{condition}/{condition}_output.png"
    shell:
        """
        module load mummer
        mummerplot -f -l -t png {input.deltafile} > {output.out_plot}
        """

rule generate_mummer_table:
    input: 
        indir = "conditions/{condition}/",
        outdir = "reports/{condition}/",
        polished_fasta= "conditions/{condition}/polished.fasta",
        csvfile = "conditions/{condition}/outputs_{condition}/snps.csv"
    output:
        txtfile = "conditions/{condition}/fastalengthfile.txt",
        rplot = "reports/{condition}/{condition}_myoutput.png",
        csv = "reports/{condition}/polished_snps.csv"
    params:
        tag = "{condition}"
    shell:
        """
        module load mummer
        module load exonerate
        fastalength {input.polished_fasta} > {output.txtfile}
        Rscript --vanilla scripts/R/mummerOneCondition.R --inDir {input.indir} --outDir {input.outdir} --conditionname {params.tag}
        """   

rule mergeSnpsCSV:
    input: local_snpsCSV.values()
    output: mergesnpscsv="reports/merge_snps.csv"
    shell:
        """
        cat reports/*/polished_snps.csv > {output.mergesnpscsv}
        sed -i.bak 1i"PosR,Rb,Qb,PosQ,X1,Buff,Dist,X2,CtxR,CtxQ,X3,F1,F2,Ref,Unitig,Condition" {output.mergesnpscsv}
        """
        
rule generate_json:
    input: 
        outdir = "reports/{condition}/",
        rplot = "reports/{condition}/{condition}_myoutput.png"
    output:
        json = "reports/{condition}/report.json"
    params:
        tag1 = "{condition}_myoutput",
        tag2 = "{condition}_output",
        tag3 = "{condition}_residual_error_1",
        tag4 = "{condition}_residual_error_2"
    shell:
        """
        module use /pbi/dept/primary/modulefiles
        module use /mnt/software/modulefiles
        module load primary-toolkit
        cd {input.outdir}
        python ../../scripts/Python/generateJsonReport.py -p {params.tag1} {params.tag2} {params.tag3} {params.tag4}
        cd ../..  
        """    
   
